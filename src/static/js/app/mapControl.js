'use strict';/**** @file 初始化地图样式和组件* @time 20170105***/window.mapControl = {    infoBoxTemp:0,    mapReady: 0,    dataReady: 0,    bigdata: '',    pathname:function(){        var url =$('body').attr('class');        return  url;    },    //获取当前页面是否为全国监控    entiremonitor:function(){        var level = 0;        if(this.pathname() == 'entiremonitorBody'){            level = 5;        }else{            level = 5;        }        return level;    },	//初始化地图	initMap:function(){        var script = document.createElement('script');        script.src = '/static/js/lib/InfoBox.js';        document.getElementsByTagName('head')[0].appendChild(script);        var script = document.createElement('script');        script.src ='/static/js/lib/CanvasLayer.js';        document.getElementsByTagName('head')[0].appendChild(script);        var script = document.createElement('script');        script.src ='http://api.map.baidu.com/library/DrawingManager/1.4/src/DrawingManager_min.js';        document.getElementsByTagName('head')[0].appendChild(script);		window.map = new BMap.Map("allmap",{enableMapClick:false});//创建Map实例		map.centerAndZoom(new BMap.Point(108.974635,34.561093), this.entiremonitor());//初始化地图，设置中心点坐标和地图级别		map.enableScrollWheelZoom(true);//开启鼠标滚轮缩放        map.setDefaultCursor('default');		// this.initLocation();		this.initControl();		this.initOverlay();        //监听地图拖拽事件        if(this.pathname() == 'entiremonitorBody'){            //拖拽地图            map.addEventListener("dragend", function(){                rhinoSearch.initRhino();                regSelect.closeWindow();            });            //地图更改缩放级别结束时触发触发此事件            map.addEventListener("zoomend", function(){                rhinoSearch.initRhino();                regSelect.closeWindow();                if(regSelect.select_type !== 0){                    regSelect.closeDrawingManager();                }            });            teresaUrls.getTicket();        }        	},	//根据浏览器定位确定地图位置	initLocation:function(){		var geolocation = new BMap.Geolocation();		geolocation.getCurrentPosition(function(r){			if(this.getStatus == BMAP_STATUS_SUCCESS){				map.panTo(r.point);			}else{			}		},		{			enableHighAccuracy:true		});	},	//添加控件	initControl:function(){		this.addZoomControl();        this.initSpeedControl();				this.addScaleControl();		this.initTrafficControl();		this.showTrafficControl();        if(this.pathname() !== 'entiremonitorBody'){            this.showSpeedControl();        }	},	//添加比例尺	addScaleControl:function(){		map.addControl(new BMap.ScaleControl({			anchor: BMAP_ANCHOR_BOTTOM_LEFT,			offset: new BMap.Size(100,50)		}));	},	//添加缩放控件	addZoomControl:function(){		//自定义缩放控件		var ZoomControl = function(){			//默认停靠位置和偏移量			this.defaultAnchor = BMAP_ANCHOR_TOP_RIGHT;;			this.defaultOffset = new BMap.Size(15,176);		};		//通过JavaScript的prototype属性继承于BMap.Control		ZoomControl.prototype = new BMap.Control();		//自定义空间必须实现自己的initialize方法，并且将控件的DOM元素返回		//在本方法中创建div元素作为控件的容器，并将其添加到地图容器中		ZoomControl.prototype.initialize = function(map){			var zoom = document.createElement("div");			zoom.className = 'zoom';			var zoomIn = document.createElement("div");			zoomIn.className = 'zoomIn';			var zoomOut = document.createElement("div");			zoomOut.className = 'zoomOut';			zoom.appendChild(zoomIn);			zoom.appendChild(zoomOut);			zoomIn.onclick = function(e){                if(map.getZoom()==18){                    zoomIn.className = 'zoomIn zoomInbg';                }else{                    zoomOut.className = 'zoomOut';                }				map.zoomIn();			};			zoomOut.onclick = function(e){                if(map.getZoom()==3){                    zoomOut.className = 'zoomOut zoomOutbg';                }else{                    zoomIn.className = 'zoomIn';                }				map.zoomOut();			};			//添加DOM元素到地图中			map.getContainer().appendChild(zoom);			//将DOM元素返回			return zoom;		};		//创建控件		var myZoomCtrl = new ZoomControl();		map.addControl(myZoomCtrl);	},	//初始化速度标识控件	initSpeedControl:function(){		//自定义速度控件		this.SpeedControl = function(){			this.defaultAnchor = BMAP_ANCHOR_BOTTOM_RIGHT;			this.defaultOffset = new BMap.Size(15,15);		}		//通过JavaScript的prototype属性继承于Bmap.Control		this.SpeedControl.prototype = new BMap.Control();		//自定义空间必须实现自己的initialize方法，并且将控件的DOM元素返回		//在本方法中创建div元素作为控件的容器，并将其添加到地图容器中		this.SpeedControl.prototype.initialize = function(map){			var speedControl = document.createElement("div");			speedControl.className = 'speedControl';			//添加DOM元素到地图中			map.getContainer().appendChild(speedControl);			//将DOM元素返回			return speedControl;		};	},	/**    * 显示速度控件    *    */    showSpeedControl: function() {         // 创建控件        this.mySpeedControl = new this.SpeedControl();        // 添加到地图当中        map.addControl(this.mySpeedControl);    },    /**    * 删除速度控件    *    */    removeSpeedControl: function() {        map.removeControl(this.mySpeedControl);    },    /**    * 添加交通流量控件    *    */    initTrafficControl: function() {        var trafficLayer;        /**         * 自定义交通流量控件         *         */        this.TrafficControl = function (){            // 默认停靠位置和偏移量            this.defaultAnchor = BMAP_ANCHOR_TOP_RIGHT;            this.defaultOffset = new BMap.Size(15, 110);        }        // 通过JavaScript的prototype属性继承于BMap.Control        this.TrafficControl.prototype = new BMap.Control();        // 自定义控件必须实现自己的initialize方法,并且将控件的DOM元素返回        // 在本方法中创建个div元素作为控件的容器,并将其添加到地图容器中        this.TrafficControl.prototype.initialize = function(map){            var traffic = document.createElement("div");            traffic.className = 'trafficOn';            traffic.onclick = function (e) {                if (traffic.className.indexOf('trafficOn') > -1) {                    trafficLayer = new BMap.TrafficLayer();                    map.addTileLayer(trafficLayer);                    traffic.className = traffic.className.replace(/trafficOn/, 'trafficOff');                } else {                    map.removeTileLayer(trafficLayer);                    traffic.className = traffic.className.replace(/trafficOff/, 'trafficOn');                }            };            // 添加DOM元素到地图中            map.getContainer().appendChild(traffic);            // 将DOM元素返回            return traffic;        }    },    /**    * 显示路况控件    *    */    showTrafficControl: function() {        // 创建控件        this.myTrafficCtrl = new this.TrafficControl();        // 添加到地图当中        map.addControl(this.myTrafficCtrl);    },    /**    * 删除路况控件    *    */    removeTrafficControl: function() {        map.removeControl(this.myTrafficCtrl);    },    /*    *   自定义聚合点覆盖物    *   10-,10-49,50-99,100+    */    initVehicleHotspots: function() {        this.vehicleHotspots = function(point, type, data) {            this._point = point;//坐标点            this._type = type;//class            this._data = data;//数据            this.type = 'behavior';        }        this.vehicleHotspots.prototype = new BMap.Overlay();        this.vehicleHotspots.prototype.initialize = function(map){            var that = this;            this._map = map;            var redWidth = 0;            var orangeWidth = 0;            var greenWidth = 0;            var blueWidth = 0;            var div = this._div = document.createElement("div");            div.className = 'vehicleHotspots ';            var dataSpan = document.createElement("span");            dataSpan.className = 'vehicleHotspotData ' + this._type;            var text = document.createTextNode(that._data);            dataSpan.appendChild(text);            div.appendChild(dataSpan);            var circleDiv = document.createElement("div");            var circleNor = '';            var circleNorBlue =                        '<div class="vehicleHotspotsBlue-3"></div>';            var circleNorGreen =                        '<div class="vehicleHotspotsGreen-3"></div>';            var circleNorOrange =                        '<div class="vehicleHotspotsOrange-3"></div>';            var circleNorRed =                        '<div class="vehicleHotspotsRed-3"></div>';            switch (that._type) {                case 'vehicleHotspotsBlue':                    redWidth = '15px';                    circleNor = circleNorBlue;                break;                case 'vehicleHotspotsGreen':                    circleNor = circleNorGreen;                break;                case 'vehicleHotspotsOrange':                    circleNor = circleNorOrange;                break;                case 'vehicleHotspotsRed':                    circleNor = circleNorRed;                break;            }            circleDiv.innerHTML = circleNor;            div.appendChild(circleDiv);            var _point = this._point;            div.onclick = function(){                map.zoomIn();                map.setCenter(_point);                map.setDefaultCursor('default');            }            div.onmouseover = function(){                map.setDefaultCursor('pointer');            }            div.onmouseout = function(){                map.setDefaultCursor('default');            }            map.getPanes().labelPane.appendChild(div);                        return div;        }        this.vehicleHotspots.prototype.draw = function(){            var map = this._map;            var pixel = map.pointToOverlayPixel(this._point);            this._div.style.left = pixel.x + "px";            this._div.style.top  = pixel.y + "px";        }    },    addVehicleHotspots: function(point, type, data) {        var myCompOverlay = new this.vehicleHotspots(point, type, data);        map.addOverlay(myCompOverlay);    },    /**     * 初始化自定义覆盖物     *     */    initOverlay: function() {        this.initVehicleHotspots();    },    /**    * 删除聚合点覆盖物    *    */    removeBehaviorOverlay: function() {        var overlays = map.getOverlays();        var length = overlays.length;        var behaviorOverlays = [];        for(var i = 0; i < length; i++) {            if(overlays[i].type === 'behavior') {                behaviorOverlays.push(overlays[i]);            }        }        for(var j = 0; j < behaviorOverlays.length; j++) {            map.removeOverlay(behaviorOverlays[j]);        }    },    //监听点击标注事件    addClickHandler:function (content,marker){        var that = this;        marker.addEventListener("click",function(e){            map.closeInfoWindow();            that.openInfo(content,e)}        );    },    //打开信息窗口    openInfo:function(content,e,lngLat){        var p,point;        // var this._map = map;        if(e!==''){            p = e.target;            point = new BMap.Point(p.getPosition().lng, p.getPosition().lat);        }else{            point = new BMap.Point(lngLat.lon, lngLat.lat);            map.centerAndZoom(point, 9);        }        var html = content;        var infoBox = new BMapLib.InfoBox(map,html,{            boxStyle:{                background:"url('/static/images/infobox1.png') no-repeat center bottom",                width: "295px",                height: "auto",                padding:"0 0 20px 0"            },            closeIconMargin: "4px 5px 0 0",            enableAutoPan: true,            align: INFOBOX_AT_TOP,            closeIconUrl:'/static/images/close.png'        });        if(this.infoBoxTemp){            this.infoBoxTemp.close();        }        this.infoBoxTemp = infoBox;        var marker = new BMap.Marker(point);        infoBox.open(marker);        // infoBox.disableMassClear();    },    //拖拽地图    addDragend:function(){        map.addEventListener("dragend", function(){            rhinoSearch.initRhino();        });    },    //地图更改缩放级别结束时触发触发此事件    addZoomend:function(){        map.addEventListener("zoomend", function(){            rhinoSearch.initRhino();        });    }}